buildscript {
    ext.kotlin_version = '1.2.10'
    ext.corda_release_version = '3.1-corda'
    ext.spring_boot_version = '2.0.4.RELEASE'
    ext.junit_version = '4.12'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "net.corda:corda-rpc:$corda_release_version"
    compile "net.corda:corda-finance:$corda_release_version"

    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
    testCompile("org.springframework.boot:spring-boot-starter-test:$spring_boot_version")
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    compile files('jars/cordapp-example-0.1.jar')
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test{
    exclude 'com/hmlr/api/**'
}


bootJar{
    mainClassName = 'com.hmlr.api.ServerKt'
    baseName = 'corda-spring-api'
}

task runSpringServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.hmlr.api.ServerKt'
    if (project.hasProperty("serverPort") && project.hasProperty("nodePort") && project.hasProperty("nodeIP"))
    {
        environment "server.port", findProperty('serverPort')
        environment "config.rpc.port", findProperty('nodePort')
        environment "config.rpc.host", findProperty('nodeIP')
    }
}
